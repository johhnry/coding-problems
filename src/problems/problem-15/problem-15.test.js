"use strict";
const { expect } = require("chai");
const { arrayToString } = require("../../utils/test");
const maximumValuesOfEachSubarray = require("./problem-15");

const testCases = [
  {
    array: [10, 5, 2, 7, 8, 7],
    tests: [
      [1, [10, 5, 2, 7, 8, 7]],
      [2, [10, 5, 7, 8, 8]],
      [3, [10, 7, 8, 8]],
      [4, [10, 8, 8]],
      [5, [10, 8]],
      [6, [10]],
    ],
  },
  {
    array: [1, 5, 3, 18, 9, 3, -2, 9, 4, 2, 16],
    tests: [
      [1, [1, 5, 3, 18, 9, 3, -2, 9, 4, 2, 16]],
      [2, [5, 5, 18, 18, 9, 3, 9, 9, 4, 16]],
      [3, [5, 18, 18, 18, 9, 9, 9, 9, 16]],
      [4, [18, 18, 18, 18, 9, 9, 9, 16]],
      [5, [18, 18, 18, 18, 9, 9, 16]],
      [6, [18, 18, 18, 18, 9, 16]],
      [7, [18, 18, 18, 18, 16]],
      [8, [18, 18, 18, 18]],
      [9, [18, 18, 18]],
      [10, [18, 18]],
      [11, [18]],
    ],
  },
  {
    array: [
      15, 12, 10, 7, 7, 19, 7, 17, 27, 5, 20, 18, 16, 16, 18, 2, 1, 9, 5, 6, 1,
      2, 26, 11, 22, 14, 14, 21, 1, 19, 17, 25, 4, 21, 10, 2, 16, 6, 0, 17, 6,
      27, 1, 9, 22, 16, 11, 4, 8, 23, 3, 21, 8, 26, 24, 6, 10, 25, 25, 14, 5,
      20, 2, 1, 6, 1, 23, 18, 26, 16, 3, 10, 13, 0, 19, 23, 26, 20, 30, 18, 22,
      23, 19, 20, 13, 23, 21, 21, 1, 29, 29, 3, 28, 30, 12, 23, 19, 10, 23, 1,
    ],
    tests: [
      [
        4,
        [
          15, 12, 19, 19, 19, 27, 27, 27, 27, 20, 20, 18, 18, 18, 18, 9, 9, 9,
          6, 26, 26, 26, 26, 22, 22, 21, 21, 21, 25, 25, 25, 25, 21, 21, 16, 16,
          17, 17, 27, 27, 27, 27, 22, 22, 22, 16, 23, 23, 23, 23, 26, 26, 26,
          26, 25, 25, 25, 25, 25, 20, 20, 20, 6, 23, 23, 26, 26, 26, 26, 16, 13,
          19, 23, 26, 26, 30, 30, 30, 30, 23, 23, 23, 23, 23, 23, 23, 29, 29,
          29, 29, 30, 30, 30, 30, 23, 23, 23,
        ],
      ],
      [
        8,
        [
          19, 27, 27, 27, 27, 27, 27, 27, 27, 20, 20, 18, 18, 18, 18, 26, 26,
          26, 26, 26, 26, 26, 26, 22, 25, 25, 25, 25, 25, 25, 25, 25, 21, 21,
          27, 27, 27, 27, 27, 27, 27, 27, 23, 23, 23, 23, 26, 26, 26, 26, 26,
          26, 26, 26, 25, 25, 25, 25, 25, 23, 23, 26, 26, 26, 26, 26, 26, 26,
          26, 26, 26, 30, 30, 30, 30, 30, 30, 30, 30, 23, 23, 23, 29, 29, 29,
          29, 30, 30, 30, 30, 30, 30, 30,
        ],
      ],
      [
        52,
        [
          27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
          27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 30, 30, 30, 30, 30, 30, 30,
          30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
        ],
      ],
      [
        73,
        [
          27, 27, 27, 27, 27, 27, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
          30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
        ],
      ],
    ],
  },
  {
    array: [
      837, 309, 50, 425, 886, 744, 479, 142, 116, 875, 885, 769, 779, 157, 490,
      857, 177, 971, 747, 852, 393, 222, 359, 356, 776, 459, 818, 445, 321, 578,
      74, 736, 742, 305, 217, 153, 241, 595, 460, 613, 894, 727, 623, 924, 14,
      103, 595, 823, 734, 761, 782, 739, 82, 392, 77, 630, 484, 183, 605, 578,
      572, 588, 143, 341, 321, 398, 424, 292, 283, 703, 885, 744, 730, 477, 8,
      728, 404, 504, 194, 529, 879, 586, 738, 371, 308, 487, 548, 500, 872, 669,
      841, 23, 498, 719, 812, 671, 837, 377, 504, 121, 340, 8, 161, 227, 919,
      189, 223, 232, 499, 198, 845, 839, 647, 382, 929, 837, 238, 393, 57, 919,
      518, 511, 836, 601, 232, 474, 567, 592, 776, 78, 975, 525, 880, 302, 854,
      266, 507, 793, 995, 911, 11, 64, 648, 56, 365, 111, 577, 115, 344, 227,
      532, 928, 953, 772, 669, 719, 323, 796, 232, 895, 329, 798, 692, 333, 843,
      732, 63, 696, 945, 865, 78, 20, 240, 932, 539, 453, 725, 611, 849, 554,
      672, 532, 129, 974, 67, 218, 295, 533, 294, 309, 382, 44, 99, 224, 344,
      18, 544, 707, 897, 192, 465, 302, 176, 489, 940, 171, 10, 771, 787, 882,
      406, 2, 291, 311, 70, 639, 709, 636, 515, 980, 290, 329, 559, 261, 770,
      339, 223, 245, 944, 879, 934, 139, 341, 611, 179, 917, 342, 207, 213, 844,
      497, 727, 240, 111, 508, 74, 606, 556, 198, 751, 471, 487, 839, 448, 958,
      757, 992, 856, 328, 941, 316, 504, 979, 649, 607, 360, 358, 285, 383, 557,
      179, 26, 496, 36, 361, 697, 137, 456, 743, 668, 533, 271, 639, 175, 221,
      686, 816, 942, 827, 727, 750, 824, 798, 404, 619, 539, 17, 63, 115, 232,
      946, 489, 309, 430, 454, 383, 887, 439, 662, 495, 373, 459, 237, 458, 940,
      617, 350, 672, 203, 817, 199, 252, 137, 161, 110, 265, 149, 594, 506, 222,
      453, 63, 311, 442, 895, 34, 688, 801, 910, 792, 134, 177, 649, 621, 462,
      925, 424, 352, 8, 126, 594, 561, 278, 57, 959, 558, 671, 726, 372, 343,
      267, 779, 564, 896, 206, 299, 448, 232, 576, 102, 67, 57, 596, 712, 565,
      446, 309, 359, 808, 466, 992, 696, 93, 12, 559, 409, 875, 725, 69, 990,
      977, 676, 945, 995, 209, 385, 849, 440, 771, 719, 318, 389, 640, 640, 942,
      479, 103, 180, 456, 129, 977, 79, 318, 722, 300, 732, 514, 315, 387, 763,
      243, 131, 325, 839, 290, 565, 48, 900, 3, 943, 910, 308, 682, 712, 306,
      322, 722, 696, 193, 789, 66, 61, 549, 369, 404, 945, 914, 15, 119, 424,
      310, 162, 344, 211, 405, 103, 830, 342, 225, 869, 711, 225, 330, 645, 222,
      651, 576, 555, 322, 321, 571, 565, 377, 318, 210, 906, 427, 196, 911, 966,
      286, 301, 572, 896, 587, 637, 956, 313, 380, 578, 960, 274, 164, 647, 762,
      103, 838, 130, 90, 485,
    ],
    tests: [
      [
        10,
        [
          886, 886, 886, 886, 886, 885, 885, 885, 971, 971, 971, 971, 971, 971,
          971, 971, 971, 971, 852, 852, 818, 818, 818, 818, 818, 818, 818, 742,
          742, 742, 742, 894, 894, 894, 924, 924, 924, 924, 924, 924, 924, 924,
          924, 924, 823, 823, 823, 823, 782, 782, 782, 739, 630, 630, 630, 630,
          605, 605, 605, 588, 703, 885, 885, 885, 885, 885, 885, 885, 885, 885,
          885, 879, 879, 879, 879, 879, 879, 879, 879, 879, 879, 872, 872, 872,
          872, 872, 872, 872, 872, 841, 841, 837, 837, 837, 837, 919, 919, 919,
          919, 919, 919, 919, 919, 919, 919, 929, 929, 929, 929, 929, 929, 929,
          929, 929, 929, 919, 919, 919, 919, 919, 836, 975, 975, 975, 975, 975,
          975, 975, 975, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 911,
          648, 648, 928, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 895,
          895, 895, 895, 895, 895, 945, 945, 945, 945, 945, 945, 945, 945, 945,
          945, 932, 932, 932, 932, 932, 974, 974, 974, 974, 974, 974, 974, 974,
          974, 974, 533, 533, 533, 544, 707, 897, 897, 897, 897, 897, 897, 940,
          940, 940, 940, 940, 940, 940, 940, 940, 940, 882, 882, 882, 882, 882,
          980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 944, 944, 944, 944,
          944, 944, 944, 944, 944, 934, 934, 917, 917, 917, 917, 917, 844, 844,
          844, 844, 751, 751, 751, 839, 839, 958, 958, 992, 992, 992, 992, 992,
          992, 992, 992, 992, 992, 979, 979, 979, 979, 979, 979, 649, 607, 557,
          697, 697, 697, 743, 743, 743, 743, 743, 743, 743, 743, 816, 942, 942,
          942, 942, 942, 942, 942, 942, 942, 942, 827, 824, 824, 946, 946, 946,
          946, 946, 946, 946, 946, 946, 946, 887, 887, 887, 887, 940, 940, 940,
          940, 940, 940, 940, 940, 940, 940, 817, 817, 817, 817, 817, 594, 594,
          594, 594, 594, 895, 895, 895, 895, 910, 910, 910, 910, 910, 910, 910,
          925, 925, 925, 925, 925, 925, 925, 925, 925, 959, 959, 959, 959, 959,
          959, 959, 959, 959, 959, 896, 896, 896, 896, 896, 896, 896, 896, 896,
          712, 712, 712, 712, 712, 808, 808, 992, 992, 992, 992, 992, 992, 992,
          992, 992, 992, 990, 990, 990, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 849, 942, 942, 942, 942, 942, 942, 977, 977, 977, 977, 977,
          977, 977, 977, 977, 977, 763, 763, 763, 839, 839, 839, 839, 900, 900,
          943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 910, 789, 789, 789,
          789, 789, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 914, 830,
          830, 830, 869, 869, 869, 869, 869, 869, 869, 869, 869, 869, 711, 651,
          651, 651, 651, 651, 906, 906, 906, 911, 966, 966, 966, 966, 966, 966,
          966, 966, 966, 966, 956, 960, 960, 960, 960, 960, 960, 960, 960, 960,
          960,
        ],
      ],
      [
        100,
        [
          971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971,
          971, 971, 971, 971, 929, 929, 929, 929, 929, 929, 929, 929, 929, 929,
          929, 929, 929, 975, 975, 975, 975, 975, 975, 975, 975, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 980,
          980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980,
          980, 980, 980, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992,
          992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992,
          992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992,
          992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992,
          992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992,
          992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992,
          992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992,
          992, 992, 992, 992, 992, 979, 979, 979, 979, 979, 979, 959, 959, 959,
          959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959, 959,
          959, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 977, 977, 977, 977, 977, 977, 977,
        ],
      ],
      [
        250,
        [
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 992,
          992, 992, 992, 992, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
          995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995,
        ],
      ],
    ],
  },
];

describe("Problem 15", function () {
  describe("Computes the maximum values of each subarray of length k", function () {
    for (const testCase of testCases) {
      const { array, tests } = testCase;

      describe(`With ${arrayToString(array, 50)}`, function () {
        for (let i = 0; i < tests.length; i++) {
          const [k, maximumValues] = tests[i];

          it(`k=${k} -> ${arrayToString(maximumValues, 50)}`, function () {
            expect(maximumValuesOfEachSubarray(array, k)).to.eql(maximumValues);
          });
        }
      });
    }
  });
});
